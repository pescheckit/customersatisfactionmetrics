name: Django CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [published]

jobs:
  lint:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Pipenv
        run: |
          python -m pip install --upgrade pip
          pip install pipenv ruff
      - name: Install dependencies with Pipenv
        run: |
          pipenv install --dev
      - name: Analysing the code with pylint
        run: |
          pipenv run pylint $(git ls-files '*.py')
      - name: Check code style with flake8
        run: |
          pipenv run flake8 .
      - name: Check import order with isort
        run: |
          pipenv run isort --check-only --diff .
      - name: Linting with Ruff
        run: |
          ruff check $(git ls-files '*.py')

  test:
    needs: lint
    runs-on: ubuntu-22.04
    strategy:
      max-parallel: 4
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Pipenv and Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
      - name: Install dependencies with Pipenv
        run: |
          pipenv install --dev
      - name: Run migrations
        run: |
          pipenv run python manage.py migrate
      - name: Run Tests
        run: |
          pipenv run python manage.py test customersatisfactionmetrics

  deploy:
    needs: test
    runs-on: ubuntu-22.04
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: release
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'
      - name: Install Pipenv
        run: python -m pip install --upgrade pipenv
      - name: Install dependencies with Pipenv
        run: |
          pipenv install --dev
      - name: Build package
        run: pipenv run python -m build src/
      - name: Publish package
        uses: pypa/gh-action-pypi-publish@v1.8.10
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages_dir: src/dist/
